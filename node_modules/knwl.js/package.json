{
  "_args": [
    [
      {
        "raw": "Knwl@github:loadfive/Knwl.js",
        "scope": null,
        "escapedName": "Knwl",
        "name": "Knwl",
        "rawSpec": "github:loadfive/Knwl.js",
        "spec": "github:loadfive/Knwl.js",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:loadfive/Knwl.js.git",
          "sshUrl": "git+ssh://git@github.com/loadfive/Knwl.js.git",
          "httpsUrl": "git+https://github.com/loadfive/Knwl.js.git",
          "gitUrl": "git://github.com/loadfive/Knwl.js.git",
          "shortcut": "github:loadfive/Knwl.js",
          "directUrl": "https://raw.githubusercontent.com/loadfive/Knwl.js/master/package.json"
        }
      },
      "C:\\Users\\Shane\\WebstormProjects\\WebScraper"
    ]
  ],
  "_from": "loadfive/Knwl.js",
  "_id": "knwl.js@1.0.2",
  "_inCache": true,
  "_location": "/knwl.js",
  "_phantomChildren": {},
  "_requested": {
    "raw": "Knwl@github:loadfive/Knwl.js",
    "scope": null,
    "escapedName": "Knwl",
    "name": "Knwl",
    "rawSpec": "github:loadfive/Knwl.js",
    "spec": "github:loadfive/Knwl.js",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:loadfive/Knwl.js.git",
      "sshUrl": "git+ssh://git@github.com/loadfive/Knwl.js.git",
      "httpsUrl": "git+https://github.com/loadfive/Knwl.js.git",
      "gitUrl": "git://github.com/loadfive/Knwl.js.git",
      "shortcut": "github:loadfive/Knwl.js",
      "directUrl": "https://raw.githubusercontent.com/loadfive/Knwl.js/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git://github.com/loadfive/Knwl.js.git#5f3157df3b25ff4d78993bd63ac0436f07d8fda0",
  "_shasum": "c4078635cc4e477d95dbf86ab0612c3b11bf54ab",
  "_shrinkwrap": null,
  "_spec": "Knwl@github:loadfive/Knwl.js",
  "_where": "C:\\Users\\Shane\\WebstormProjects\\WebScraper",
  "author": {
    "name": "loadfive",
    "email": "contact@loadfive.com"
  },
  "bugs": {
    "url": "https://github.com/loadfive/Knwl.js/issues"
  },
  "dependencies": {
    "phoneformat.js": "^1.0.3"
  },
  "description": "Parse through text for specific information.",
  "devDependencies": {
    "browserify": "^10.2.3",
    "jasmine-node": "^1.14.5",
    "uglifyjs": "^2.4.10"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "5f3157df3b25ff4d78993bd63ac0436f07d8fda0",
  "homepage": "https://github.com/loadfive/Knwl.js#readme",
  "keywords": [
    "data",
    "tagging",
    "parsing",
    "language"
  ],
  "main": "knwl.js",
  "name": "knwl.js",
  "optionalDependencies": {},
  "readme": "# Knwl.js\r\nKnwl.js is a Javascript library that parses through text for dates, times, phone numbers, emails, places, and more. \r\n\r\n____\r\n##Project Future\r\n**The future of the Knwl.js project**: https://github.com/loadfive/Knwl.js/issues/97\r\n____\r\nParser plugins are what make Knwl.js tick and give it new parsing abilities. There are many already available under ```./default_plugins``` for a number of tasks.\r\nIf you're interested in developing plugins for Knwl.js, ```./plugin_development.md``` is a great place to start.\r\n\r\n#### Google+ Community: https://plus.google.com/communities/108874785204246812675\r\n\r\n## Installation\r\n\r\nInstallation instructions are specific to whether you want to run Knwl.js in the browser, or on the server with Node.js.\r\n\r\n###For Node.js\r\n\r\n#### Install using ```npm```:\r\n\r\n```console\r\n\tnpm install knwl.js\r\n```\r\n\r\n1. Load the ```knwl``` module using ```require()``` and create a new Instance.\r\n\r\n\t```javascript\r\n\t\tvar Knwl = require(\"./knwl.js\");\r\n\t\t\r\n\t\tvar knwlInstance = new Knwl('english');\r\n\t```\r\n\t\r\n\tYou can optionally specify a language in the first parameter. This helps plugins identify and better suit particular languages.\r\n\r\n2. Load a parser plugin.\r\n\r\n\t```javascript\r\n\t\tknwlInstance.register('dates', require('./default_plugins/dates'));\r\n\t```\r\n\t\r\n\tThe first parameter is the desired label for the plugin. The second parameter is a ```require()``` call to load the plugin.\r\n\t\r\n\t*Note: The plugins in the ```./default_plugins``` directory will be loaded automatically.*\r\n\r\n###For the Browser\r\n\r\n**Note: A packaged version of Knwl.js for the browser with default plugins is available in the ```./dist``` directory.**\r\n\r\nThese steps require the ```npm``` package.\r\n\r\n1. Run ```npm install``` to install dependencies.\r\n\r\n2. ```browserify``` may be used to build a Knwl.js project from Node.js for the browser.\r\n\r\n\tUse the following syntax in the terminal:\r\n\t\r\n\t```console\r\n\t\t./node_modules/.bin/browserify script.js knwl.js > output.js\r\n\t```\r\n\t\r\n\tThe ```script.js``` file is the Node.js file you wish to package for the browser.\r\n\r\n## Usage Guide\r\n\r\nThese steps are the same regardless of whether Knwl.js is running on the server or client.\r\n\r\n3. Initiate Knwl.js on a String.\r\n\r\n\t``` javascript\r\n\tknwlInstance.init(\"This is a string. This was written on the 2nd of June, of 2015.\");\r\n\t```\r\n\t\r\n\tThis line runs the initial parser functions that\r\n\tprepare the String for plugins to use. **Plugins\r\n\twill not function without this method first being called\r\n\ton the String.**\r\n\t\r\n4. Initiate a plugin to parse the String.\r\n\t\r\n\t``` javascript\r\n\tvar dates = knwlInstance.get('dates');\r\n\t```\r\n\t\r\n\tThe first parameter of ```knwl.get()``` is the\r\n\tname of the parser plugin you're trying to access (make sure you've added the plugin's .js file to the header of the page).\r\n\tThe names of all default parser plugins are provided\r\n\t towards the end of this document. If you're using\r\n\tplugins other than the defaults, see their respective\r\n\tdocumentation.\r\n\t\r\n\tAnyways, if the parser plugin is found, ```knwl.get()``` will return\r\n\tan array of this format:\r\n\t\r\n\t```javascript\r\n\tvar results = [\r\n\t\t{ //result\r\n\t\t\t//plugin-specific properties\r\n\t\t\t\"preview\": \"This was written on the 2nd of June of 2015.\", //the sentence of rough location of the data from the String\r\n\t\t\t\"found\": integer //the position (in words) of the result in the String\r\n\t\t}\r\n\t]\r\n\t```\r\n\t\r\n\tFor example, here's what is returned from ```knwl.get('dates')``` when called on the previously mentioned String:\r\n\t\r\n\t```json\r\n\t[\r\n\t\t{\r\n\t\t\t\"year\": 2015,\r\n\t\t\t\"month\": 6,\r\n\t\t\t\"day\": 2,\r\n\t\t\t\"preview\": \"This was written on the 2nd of June of 2015.\",\r\n\t\t\t\"found\": 5\r\n\t\t}\r\n\t]\r\n\t```\r\n\r\n## Default Plugins\r\n\r\nThese are automatically loaded by default.\r\n\r\n###dates.js\r\n```javascript\r\nknwl.get('dates');\r\n\t\r\n\t//Returns any dates found in the String.\r\n```\r\n\r\n###times.js\r\n```javascript\r\nknwl.get('times');\r\n\t\r\n\t//Returns any times found in the String.\r\n\t\r\n```\r\n\r\n###phones.js\r\n```javascript\t\t\r\nknwl.get('phones')\r\n\r\n\t//Returns any phone numbers found in the String.\r\n\r\n```\r\n\r\n###links.js\r\n```javascript\r\nknwl.get('links')\r\n\r\n\t//Returns any links found in the String.\r\n\r\n```\r\n\r\n###emails.js\r\n```javascript\r\nknwl.get('emails')\r\n\t\r\n\t//Returns any email addresses found in the String.\r\n```\r\n\r\n### places.js\r\n```javascript\r\nknwl.get('places')\r\n\r\n\t//Returns any places found in the String.\r\n```\r\n\r\n## Experimental Plugins\r\n\r\n###Notice: These plugins have not been upgraded to the new syntax.\r\n\r\nThese parser plugins are not as accurate as the default plugins. However,\r\nthey should be stable (they shouldn't crash the page) to use if you are willing to use them. They are considerably more static and rigid than default plugins.\r\n\r\nIn the future, some of these plugins may reach a level of accuracy that promotes them\r\nfrom experimental status to the default plugins. However, some will merely stay\r\nas experiments.\r\n\r\n###english.js\r\n```javascript\r\nknwl.get('english')\r\n\r\n\t//Returns the simple parts (verb, subject, etc.) of basic sentences found in the String.\r\n\t//WARNING: this is a rigid and simplistic plugin, thus it is merely an experiment.\r\n```\r\n###units.js\r\n```javascript\r\nknwl.get('units')\r\n\t\r\n\t//Returns any units (grams, pounds, etc.) found in the String.\r\n```\r\n##Developing Parser Plugins\r\n\r\nWhat's awesome about the new version of Knwl.js is that it makes it much easier\r\nfor anyone with a little knowledge of JS to build plugins. These plugins offer new\r\nparsing abilities for Knwl.js that otherwise wouldn't exist.\r\n\r\nIf you want to try your hand at building plugins for Knwl.js, there's documentation available in ```plugin_development.md```.\r\n\r\n----\r\n\r\nYou can reach me personally with any questions or comments at moore.h.ben@gmail.com.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/loadfive/Knwl.js.git"
  },
  "scripts": {
    "build": "scripts/build.sh",
    "test": "scripts/test.sh"
  },
  "version": "1.0.2"
}
